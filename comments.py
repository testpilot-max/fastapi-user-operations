# comments.py
from pydantic import BaseModel
from datetime import datetime
from typing import List

class CommentCreate(BaseModel):
    content: str
    author_name: str

class CommentInDB(BaseModel):
    id: int
    content: str
    author_name: str
    created_at: datetime
    post_id: int

def add_comment(db, comment: CommentCreate, post_id: int) -> CommentInDB:
    # This is a mock function. In a real scenario, you'd interact with the database.
    new_comment = CommentInDB(
        id=1,  # In reality, this would be generated by the database
        content=comment.content,
        author_name=comment.author_name,
        created_at=datetime.now(),
        post_id=post_id
    )
    # Here you would typically add the comment to the database
    return new_comment

def get_comments(db, post_id: int) -> List[CommentInDB]:
    # This is a mock function. In a real scenario, you'd query the database.
    # For demonstration, we're returning a list with one comment
    return [
        CommentInDB(
            id=1,
            content="Great post!",
            author_name="John Doe",
            created_at=datetime.now(),
            post_id=post_id
        )
    ]